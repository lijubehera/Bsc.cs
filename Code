import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import seaborn as sns

# Print Name
print("T072 Narayan")

# Load the Titanic dataset
url = 'https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv'
titanic_data = pd.read_csv(url)

# Display the first 8 rows of the dataset
print("\nFirst 8 rows of the dataset:")
print(titanic_data.head(8))

# Preprocessing the data
# Fill missing values
titanic_data['Age'] = titanic_data['Age'].fillna(titanic_data['Age'].median())
titanic_data['Embarked'] = titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0])

# Encode categorical variables and drop irrelevant features
X = titanic_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]
y = titanic_data['Survived']

# Convert categorical variable 'Sex' and 'Embarked' into dummy variables
X = pd.get_dummies(X, drop_first=True)

# Data Preprocessing: Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Visualizing the dataset before classification using PCA
pca = PCA(n_components=2)  # Reducing to 2 components
X_pca = pca.fit_transform(X_scaled)

# Create a DataFrame for visualization
df_pca = pd.DataFrame(X_pca, columns=['PCA1', 'PCA2'])
df_pca['target'] = y

# Plot the dataset before classification
plt.figure(figsize=(10, 6))
sns.scatterplot(x='PCA1', y='PCA2', hue='target', data=df_pca, palette='Set1')
plt.title('Titanic Dataset Visualization (Before Classification)')
plt.show()

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

# Implement the K-NN algorithm for different k-values
k_values = [2, 5, 7, 9]
for k in k_values:
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)
    y_pred = knn.predict(X_test)

    # Evaluate the accuracy of the predictions
    accuracy = accuracy_score(y_test, y_pred)
    print(f'\nAccuracy for k={k}: {accuracy:.2f}')

    # Display the classification report
    print(f"\nClassification Report for k={k}:")
    print(classification_report(y_test, y_pred))

    # Confusion matrix
    conf_matrix = confusion_matrix(y_test, y_pred)

    # Visualize the confusion matrix
    plt.figure(figsize=(8, 6))
    sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Not Survived', 'Survived'],
                yticklabels=['Not Survived', 'Survived'])
    plt.xlabel('Predicted Label')
    plt.ylabel('True Label')
    plt.title(f'Confusion Matrix for k={k}')
    plt.show()

# Cross-validation to find the optimal number of neighbors
neighbors = np.arange(1, 21)
cv_scores = []

# Perform 10-fold cross-validation
for k in neighbors:
    knn_cv = KNeighborsClassifier(n_neighbors=k)
    scores = cross_val_score(knn_cv, X_train, y_train, cv=10, scoring='accuracy')
    cv_scores.append(scores.mean())

# Plotting error rate vs. k value
plt.figure(figsize=(10, 6))
plt.plot(neighbors, 1 - np.array(cv_scores), marker='o', linestyle='--', color='b')
plt.xlabel('Number of Neighbors K')
plt.ylabel('Error Rate')
plt.title('Error Rate vs. K Value')
plt.show()

# Define k values for KNN and store accuracy scores
k_range = range(1, 21)
accuracy_scores = []

for k in k_range:
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)
    y_pred = knn.predict(X_test)

    # Evaluate the accuracy of the predictions
    accuracy = accuracy_score(y_test, y_pred)
    accuracy_scores.append(accuracy)

# Print the k values and their corresponding accuracy scores
print("\nK values and their accuracy:")
for k, acc in zip(k_range, accuracy_scores):
    print(f'k={k}: Accuracy={acc:.2f}')

# Plotting accuracy vs. k value
plt.figure(figsize=(10, 6))
plt.plot(k_range, accuracy_scores, marker='o', linestyle='-', color='b', label='Accuracy')
plt.xlabel('Number of Neighbors (k)')
plt.ylabel('Accuracy')
plt.title('Accuracy vs. Number of Neighbors (k)')
plt.xticks(k_range)
plt.grid(True)
plt.legend()
plt.show()
